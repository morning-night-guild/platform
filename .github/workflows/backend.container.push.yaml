name: backend container push
run-name: ${{ github.ref_name }} by @${{ github.actor }} ${{ github.workflow }}
on:
  pull_request:
    paths:
      - .github/workflows/backend.container.push.yaml
  schedule:
    # 日曜24時(JST)
    - cron: '0 15 * * 6'
  workflow_dispatch:
jobs:
  container-push:
    runs-on: ubuntu-22.04
    outputs:
      image-name: ${{ steps.build-and-push.outputs.image-name }}
      image-tag: ${{ steps.build-and-push.outputs.image-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version-file: backend/go.mod
      - name: Setup ko
        run: go install github.com/google/ko@latest
      - name: Docker login
        run: ko login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }} index.docker.io
      - name: Container build and push
        id: build-and-push
        working-directory: ./backend/cmd/core
        run: |
          IMAGE_NAME=platform
          echo "image-name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

          IMAGE_TAG=`date +%Y-%m-%d-%H-%M-%S`
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

          KO_DOCKER_REPO=${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME} \
          SOURCE_DATE_EPOCH=$(date +%s) \
          ko build --sbom=none --bare --tags=${IMAGE_TAG},latest ./ --platform=linux/amd64
  create-tag:
    needs: container-push
    runs-on: ubuntu-22.04
    steps:
      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.BOT_GITHUB_APP_ID }}
          private_key: ${{ secrets.BOT_GITHUB_APP_PRIVATE_KEY }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate-token.outputs.token }}
      - name: Tag
        run: |
          git tag ${{ needs.container-push.outputs.image-tag }}
          git push origin ${{ needs.container-push.outputs.image-tag }}
  release-pull-request:
    needs: container-push
    runs-on: ubuntu-22.04
    env:
      MANIFEST_REPO_NAME: platform-infra
      DOCKER_REPO_NAME: morningnightguild
      BRANCH_NAME: release/${{ needs.container-push.outputs.image-tag }}
    steps:
      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.BOT_GITHUB_APP_ID }}
          private_key: ${{ secrets.BOT_GITHUB_APP_PRIVATE_KEY }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/${{ env.MANIFEST_REPO_NAME }}
          token: ${{ steps.generate-token.outputs.token }}
          path: ${{ env.MANIFEST_REPO_NAME }}
      - name: Install yq
        run: sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 && sudo chmod +x /usr/bin/yq
      - name: Checkout branch
        run: |
          git branch ${{ env.BRANCH_NAME }}
          git checkout ${{ env.BRANCH_NAME }}
        working-directory: ${{ env.MANIFEST_REPO_NAME }}
      - name: Update image tag
        run: |
          export IMAGE_TAG=${{ needs.container-push.outputs.image-tag }}
          yq '.image.tag=env(IMAGE_TAG)' values.yaml > tmp.yml && mv tmp.yml values.yaml
        working-directory: ${{ env.MANIFEST_REPO_NAME }}/k8s/env/prod
      - name: Git push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "update image tag ${{ needs.container-push.outputs.image-name }} ${{ needs.container-push.outputs.image-tag }}"
          git push --set-upstream origin ${{ env.BRANCH_NAME }}
        working-directory: ${{ env.MANIFEST_REPO_NAME }}
      - name: Create release pull request
        run: |
          export GH_TOKEN=${{ steps.generate-token.outputs.token }}
          gh pr create --base main --title "Release ${{ needs.container-push.outputs.image-name }} ${{ needs.container-push.outputs.image-tag }}" --body "" --label release
        working-directory: ${{ env.MANIFEST_REPO_NAME }}
